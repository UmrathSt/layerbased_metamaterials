function woodpile(name, UCDim, params, complemential);
  physical_constants;
  UC.layer_td = 0;
  UC.layer_fd = 0;
  UC.td_dumps = 0;
  UC.fd_dumps = 0;
  UC.s_dumps = 1;
  UC.s_dumps_folder = '~/Arbeit/openEMS/layerbased_metamaterials/Ergebnisse/SParameters';
  UC.s11_filename_prefix = [name];
  complemential = complemential;
  if complemential;
    UC.s11_filename_prefix = horzcat(UC.s11_filename_prefix, '_comp');
  end;
  UC.s11_filename = 'Sparameters_';
  UC.s11_subfolder = 'woodpile';
  UC.run_simulation = 1;
  UC.show_geometry = 0;
  UC.grounded = 1;
  UC.unit = 1e-3;
  UC.f_start = 1e9;
  UC.f_stop = 30e9;
  UC.lx = UCDim;
  UC.ly = UCDim;
  UC.lz = c0/ UC.f_start / 2 / UC.unit;
  UC.dz = c0 / (UC.f_stop) / UC.unit / 20;
  UC.dx = UC.dz/3;
  UC.dy = UC.dx;
  UC.dump_frequencies = [2.4e9, 5.2e9];
  UC.s11_delta_f = 10e6;
  UC.EndCriteria = 1e-4;
  UC.SimPath = ['/mnt/hgfs/E/openEMS/layerbased_metamaterials/Simulation/' UC.s11_subfolder '/' UC.s11_filename_prefix];
  UC.ResultPath = ['~/Arbeit/openEMS/git_layerbased/layerbased_metamaterials/Ergebnisse'];
  try;
    if strcmp(uname.nodename, 'Xeon');
        display('Running on Xeon');
        UC.SimPath = ['/media/stefan/Daten/openEMS/' UC.s11_subfolder '/' UC.s11_filename_prefix];
        UC.s_dumps_folder = '~/Arbeit/openEMS/layerbased_metamaterials/Ergebnisse/SParameters';
        UC.ResultPath = ['~/Arbeit/openEMS/layerbased_metamaterials/Ergebnisse'];
        end;
    catch lasterror;
  end;
  UC.SimCSX = 'geometry.xml';
  if UC.run_simulation;
    try;
    confirm_recursive_rmdir(0);
    catch lasterror;
    end_try_catch;
    [status, message, messageid] = rmdir(UC.SimPath, 's' ); % clear previous directory
    [status, message, messageid] = mkdir(UC.SimPath ); % create empty simulation folder
  end;
  FDTD = InitFDTD('EndCriteria', UC.EndCriteria);
  FDTD = SetGaussExcite(FDTD, 0.5*(UC.f_start+UC.f_stop),0.5*(UC.f_stop-UC.f_start));
  BC = {'PMC', 'PMC', 'PEC', 'PEC', 'PML_8', 'PML_8'}; % boundary conditions
  FDTD = SetBoundaryCond(FDTD, BC);
  rectangle.name = 'backplate';
  rectangle.lx = UCDim;
  rectangle.ly = UCDim;
  rectangle.lz = 0.5;
  rectangle.rotate = 0;
  rectangle.prio = 2;
  rectangle.xycenter = [0, 0];
  rectangle.material.name = 'CuBackplane';
  rectangle.material.Kappa = 56e6;
  rectangle.material.type = 'const';



  cube.name = 'cube';
  cube.Lx = 0; 
  cube.Ly = 0; 
  cube.Lz = 0; 
  cube.lz  = 0;
  cube.UClx = UCDim;
  cube.UCly = UCDim;
  cube.prio = 6;
  cube.xycenter = [0, 0];
  cube.material.name = 'dummy_name';
  cube.material.type = 'const';
  cube.material.Kappa = 0;
  cube.material.Epsilon = 1;
  cube.bmaterial.name = 'dummy_bname';
  cube.bmaterial.type = "const";
  cube.bmaterial.Kappa = 0;
  cube.bmaterial.Epsilon = 1;
  cube.rotate = 0;
  
for i = 1:size(params)(1);
    cube.Lx = params{i, 1}; 
    cube.Ly = params{i, 2}; 
    cube.Lz = params{i, 3}; 
    cube.lz  = params{i, 3};
    cube.material.name = params{i, 4};
    cube.material.Epsilon = params{i, 5};
    cube.material.Kappa = params{i, 6};
    cube.bmaterial.name = params{i, 7};
    cube.bmaterial.Epsilon = params{i, 8};
    cube.bmaterial.Kappa = params{i, 9};
    cubes(i) = cube;
end;
fprintf("\n finished appending cubes \n");

layer_list = {@CreateUC, UC; @CreateRect, rectangle};
material_list{1} = rectangle.material;
for i = 1:size(params)(1);
      material_list = append_material(material_list, cubes(i).material, 0);
      material_list = append_material(material_list, cubes(i).bmaterial, 0);
end;

for i = 1:size(params)(1);
        layer_list(2+i,1) = @CreateCrossedCube;
        layer_list(2+i,2) = cubes(i);
end;
  

  [CSX, mesh, param_str, UC] = stack_layers(layer_list, material_list);
  [CSX, port, UC] = definePorts(CSX, mesh, UC);
  UC.param_str = param_str;
  [CSX] = defineFieldDumps(CSX, mesh, layer_list, UC);
  WriteOpenEMS([UC.SimPath '/' UC.SimCSX], FDTD, CSX);
  if UC.show_geometry;
    CSXGeomPlot([UC.SimPath '/' UC.SimCSX]);
  end;
  if UC.run_simulation;
    openEMS_opts = '--numThreads=4';#'-vvv';
    #Settings = ['--debug-PEC', '--debug-material'];
    Settings = [''];
    RunOpenEMS(UC.SimPath, UC.SimCSX, openEMS_opts, Settings);
  end;
  doPortDump(port, UC);
end